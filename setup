#!/usr/bin/env python

import sys
import re
import os


def print_usage():
  print "Usage:"
  print "help\t\tPrint usage"
  print "install\t\tInstall dotfiles to ~/.<file>"
  print "uninstall\tUninstall dotfiles from ~/.<file>"

def get_platform_files():
  files = [ "gitconfig", "vim", "vimrc", "myconfigs", "bash_profile" ]
  mac_linux_only_files = [ "inputrc", "zshrc" ]
  if (re.search(r"(linux|darwin)", sys.platform)):
    print "Running on on linux or Mac."
    files.extend(mac_linux_only_files)
    return files
  else:
    return files

def install():
  files_to_install = get_platform_files()

  for file in files_to_install:
    fullpath = os.environ['HOME'] + "/." + file

    if os.path.exists(fullpath):
      print "Removing %s... " % fullpath
      os.remove(fullpath)
    else:
      print "File %s not found..." % fullpath

    source = (os.environ['HOME'] + "/." + file)
    dest = os.path.realpath(os.path.dirname(__file__)) + "/" + file
    print "linking " + source + " to " + dest

    os.symlink(dest, source)

def uninstall():
  files_to_uninstall = get_platform_files()
  for file in files_to_uninstall:
    fullpath = os.environ['HOME'] + "/." + file
    if os.path.exists(fullpath):
      print "Unlinking " + fullpath + "..."
      os.unlink(fullpath)

if __name__ == "__main__":
  if len(sys.argv) != 2:
    print "setup takes one argument"
    print_usage()
    sys.exit()

  if sys.argv[1] == "install":
    install()
  elif sys.argv[1] == "uninstall":
    uninstall()
  elif sys.argv[1] == "help":
    print_usage()
  else:
    print "Command not valid"
    print_usage()
